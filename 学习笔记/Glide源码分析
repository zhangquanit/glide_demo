-----------------------------原理分析

1、Glide.with()获取RequestManager
public static RequestManager with(FragmentActivity activity) {
    RequestManagerRetriever retriever = RequestManagerRetriever.get();
    return retriever.get(activity);
}

RequestManagerRetriever是单列，
创建RequestManagerFragment或SupportRequestManagerFragment，并绑定RequestManager，RequestManager也只有一个
RequestManagerFragment： app fragment
SupportRequestManagerFragment ： support fragment

2、RequestManager.load()获取DrawableTypeRequest
为每个请求创建一个DrawableTypeRequest对象

3、DrawableTypeRequest设置各种条件，最后调用into()
public class DrawableTypeRequest<ModelType> extends DrawableRequestBuilder<ModelType> implements DownloadOptions{

  //各种build方法，注入设置
  //into
public Target<TranscodeType> into(ImageView view) {
        Util.assertMainThread();
        if (view == null) {
            throw new IllegalArgumentException("You must pass in a non null View");
        }

        if (!isTransformationSet && view.getScaleType() != null) {
            switch (view.getScaleType()) {
                case CENTER_CROP:
                    applyCenterCrop();
                    break;
                case FIT_CENTER:
                case FIT_START:
                case FIT_END:
                    applyFitCenter();
                    break;
                //$CASES-OMITTED$
                default:
                    // Do nothing.
            }
        }
         //创建target
        Target target=glide.buildImageViewTarget(view, transcodeClass);
         //注入到target中
        return into(target);
    }

   1）Glide.buildImageViewTarget创建Target
   Target类型: GlideDrawableImageViewTarget、DrawableImageViewTarget、BitmapImageViewTarget

   <R> Target<R> buildImageViewTarget(ImageView imageView, Class<R> transcodedClass) {
        return imageViewTargetFactory.buildTarget(imageView, transcodedClass); //transcodedClass 几load的Class,比如String.class
    }

   2）into(target)
   public <Y extends Target<TranscodeType>> Y into(Y target) {
        Util.assertMainThread();
        if (target == null) {
            throw new IllegalArgumentException("You must pass in a non null Target");
        }
        if (!isModelSet) {
            throw new IllegalArgumentException("You must first set a model (try #load())");
        }

         //同一个target中请求
        Request previous = target.getRequest();

        if (previous != null) {
            previous.clear();
            requestTracker.removeRequest(previous);
            previous.recycle();
        }

        Request request = buildRequest(target); //创建Request  注入的各种条件，GenericRequest.obtain();
        target.setRequest(request); //注入到target中
        lifecycle.addListener(target); //绑定界面的生命周期
        requestTracker.runRequest(request); //执行请求  RequestTracker.runRequest

        return target;
    }


    public class RequestTracker {
    private final Set<Request> requests = Collections.newSetFromMap(new WeakHashMap<Request, Boolean>()); //请求集合
    private final List<Request> pendingRequests = new ArrayList<Request>();
    private boolean isPaused;

    public void runRequest(Request request) {
        requests.add(request);
        if (!isPaused) {
            request.begin(); //开始请求
        } else {
            pendingRequests.add(request); //待执行请求
        }
    }

    }


}